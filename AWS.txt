How to upload file on AWS S3 using NodeJs?

Files.
	images
	pdf
	invoices
	doc
	xls
	ppt
	video
	audio
	largefile

Disadvantage of storing file on our server?
1. Application (frontend+Backend) and Storage on Same Server
2. Week Performance
3. Application may crash

We need a dedicated service for storing large files.

1. Application will run on seperate server
2. Storage of files will be on seperate server
3. DB i.e MongoDb is also running on Seperate Server

Your Application Will be very scalable.

Large Enterprise Application
For Example
Flipkart.com
















1. React (Frontend) File ->
2.		Express Api -> 
3.			File Save (Permantly Save on our server) 
4.				-> Record MongoDBs
5.					--> AWS S3

oklabs.png

0 Index = oklabs
1 Index = png

/getimage  -> root public directory

getimage=public


1. Build the Express Api to Handle the File/Image;
	1.1 CRUD API
2. Send File/Image Frontend to Backend and save on Backend Server store the location in Mongodb.
	2.1 CRUD
3. Frontend -> Backend -> AWS S3 (Store) Store the image location mongodb

https://console.aws.amazon.com/

AWS = AMAZON WEB SERVICE
IAM = Identification and Access Management
S3  = SIMPLE STORAGE SERVICE
arn = Amazon Resource Names
EC2 = Elastic Cloud Computing
ACL = Access Control List

arn:partition:service:region:account-id:resource-id
arn:partition:service:region:account-id:resource-type/resource-id
arn:partition:service:region:account-id:resource-type:resource-id

Access key ID     =  
Secret access key = 





./uploads/oklabs.png

path.join('./uploads/','oklabs.png');
// REturn  'uploads\oklabs.png'

path.join('/foo', 'bar', 'baz/asdf', 'quux', '..');
// Returns: '/foo/bar/baz/asdf'

Types of Address
1. Absoulute Address 
	Always Start with a /
2. Relative Adrees
	Always Start with a ./
	./ represent current directory

the location of package.json file is the root of project






















User ARN	  = arn:aws:iam::042274844937:user/OKLABS
		    arn:partition:service:region:account-id:resource-type/resource-id
		    arn:aws:iam::042274844937:user/OKLABS2



Now click Bucket Policy.
Now look at the template below. You can set your bucket policy like this.Paste this template in the editor.

{
    "Version": "2012-10-17",
    "Id": "Policy1488494182833",
    "Statement": [
        {
            "Sid": "Stmt1488493308547",
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::042274844937:user/OKLABS2"
            },
            "Action": [
                "s3:ListBucket",
                "s3:ListBucketVersions",
                "s3:GetBucketLocation",
                "s3:Get*",
                "s3:Put*"
            ],
            "Resource": "arn:aws:s3:::oklabsamazonbucket2"
        }
    ]
}

Now you have given permission to use oklabs2 user to use okabsmazonbukcket2

CORS = Cross Origin Request Sharing
CORS Policy
[
    {
        "AllowedHeaders": [
            "*"
        ],
        "AllowedMethods": [
            "GET",
            "HEAD",
            "POST",
            "PUT"
        ],
        "AllowedOrigins": [
            "*"
        ],
        "ExposeHeaders": []
    }
]



Bucket = Storage Server

Bucket1 = Storage Server1
Bucket2 = Storage Server2. Location India, USA, UK, Singapore
.
.
.
.
.
.
.
.
.
.
.

amazon.in => Indian Bucket => Asia Pacific Mumbai


https://www.npmjs.com/package/aws-sdk

SDK = Software Development Kit